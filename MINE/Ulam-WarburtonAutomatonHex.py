"""
This mission is dedicated to hexagonal version the Ulam–Warburton cellular automaton
(UWCA) - a 2-dimensional fractal pattern that grows on a regular grid of cells consisting
of hexagon's.

Starting with one hexagon initially ON and all others OFF, successive iterations are
generated by turning ON all hexagons that share precisely one edge with an ON hexagon.

This pattern is shown among others (so I recommend you to watch it all) in the following
video with Neil Sloane (founder of the On-Line Encyclopedia of Integer Sequences) starting
from the 11.50.

The playground of this and other patterns may be seen on the page. It will be easier to
solve the task and it's just a beautiful hypnotic view!)

So, your function must return the number of activated cells after given number of steps.

Input: Number of steps as integer.

Output: Number of cells as integer.

Examples:
assert automaton(1) == 1
assert automaton(2) == 7
assert automaton(3) == 13
assert automaton(4) == 31

----------
----------

Esta misión está dedicada a la versión hexagonal del autómata celular de Ulam-Warburton
(UWCA), un patrón fractal bidimensional que crece sobre una rejilla regular de celdas
formadas por hexágonos.

Empezando con un hexágono inicialmente en ON y todos los demás en OFF, se generan iteraciones
sucesivas poniendo en ON todos los hexágonos que comparten precisamente un borde con un hexágono
en ON.

Este patrón se muestra entre otros (por lo que te recomiendo que lo veas entero) en el
siguiente vídeo con Neil Sloane (fundador de la Enciclopedia On-Line de Secuencias Enteras)
a partir del 11.50.

El campo de juego de este y otros patrones se puede ver en la página. Será más fácil
resolver la tarea y es simplemente una hermosa vista hipnótica).

Por lo tanto, su función debe devolver el número de células activadas después de un número
dado de pasos.

Entrada: Número de pasos como entero.

Salida: Número de células como entero.

Ejemplo:
assert autómata(1) == 1
assert autómata(2) == 7
assert autómata(3) == 13
assert autómata(4) == 31
"""


def automaton(step: int) -> int:
    # your code here
    from cmath import isclose, rect, pi

    # check if item is encountered in the container
    def encounter(item, container):
        # whitin a centain tolerance
        for i in container:
            if isclose(item, i, abs_tol=tolerance):
                return 1
        return 0

    def stepper(lastpoints, step):
        nonlocal occupied
        # if not done
        if step > 0:
            # prepare for a list of new points
            newpoints = []
            # for all by the last time added points
            for lastadd in lastpoints:
                # go for 6 directions
                for alpha in sixways:
                    # make a candidate point
                    candidate = lastadd + rect(1, alpha)
                    # and when not engaged allready
                    if not encounter(candidate, occupied):
                        # count for the 6 possible neighbors
                        count = 0
                        for betha in sixways:
                            neighbor = candidate + rect(1, betha)
                            count += encounter(neighbor, occupied)
                        # and when there only 1 in the surrounding
                        if count == 1:
                            # add the new point
                            newpoints.append(candidate)
            occupied += newpoints
            # and go for the next step
            stepper(newpoints, step - 1)
        return

    # goniometric tolerance = 1/1000000
    tolerance = 0.000001
    # go in six ways (6 x 60 degrees)
    sixways = [d * pi / 3 for d in range(6)]
    # first complex number = 0
    occupied = [0]
    # first call
    stepper(occupied, step - 1)
    # return the number of complex numbers
    return len(occupied)


print("Example:")
print(automaton(2))

# These "asserts" are used for self-checking
assert automaton(1) == 1
assert automaton(2) == 7
assert automaton(3) == 13
assert automaton(4) == 31
assert automaton(5) == 37

print("The mission is done! Click 'Check Solution' to earn rewards!")
